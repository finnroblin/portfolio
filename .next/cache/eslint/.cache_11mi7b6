[{"/Users/finnroblin/Code/portfolio/pages/404.tsx":"1","/Users/finnroblin/Code/portfolio/pages/_app.tsx":"2","/Users/finnroblin/Code/portfolio/pages/_document.tsx":"3","/Users/finnroblin/Code/portfolio/pages/bookshelf.tsx":"4","/Users/finnroblin/Code/portfolio/pages/index.tsx":"5","/Users/finnroblin/Code/portfolio/pages/posts/deploying-to-aws.tsx":"6","/Users/finnroblin/Code/portfolio/pages/posts.tsx":"7","/Users/finnroblin/Code/portfolio/pages/works/zenblock.tsx":"8","/Users/finnroblin/Code/portfolio/pages/works.tsx":"9","/Users/finnroblin/Code/portfolio/components/bio.tsx":"10","/Users/finnroblin/Code/portfolio/components/fonts.tsx":"11","/Users/finnroblin/Code/portfolio/components/game-of-life.tsx":"12","/Users/finnroblin/Code/portfolio/components/grid-item.tsx":"13","/Users/finnroblin/Code/portfolio/components/layouts/article.tsx":"14","/Users/finnroblin/Code/portfolio/components/layouts/main.tsx":"15","/Users/finnroblin/Code/portfolio/components/logo.tsx":"16","/Users/finnroblin/Code/portfolio/components/navbar.tsx":"17","/Users/finnroblin/Code/portfolio/components/paragraph.tsx":"18","/Users/finnroblin/Code/portfolio/components/post.tsx":"19","/Users/finnroblin/Code/portfolio/components/project.tsx":"20","/Users/finnroblin/Code/portfolio/components/section.tsx":"21","/Users/finnroblin/Code/portfolio/components/theme-toggle-button.tsx":"22","/Users/finnroblin/Code/portfolio/lib/theme.tsx":"23","/Users/finnroblin/Code/portfolio/components/callout.tsx":"24"},{"size":524,"mtime":1662388734412,"results":"25","hashOfConfig":"26"},{"size":705,"mtime":1654030713230,"results":"27","hashOfConfig":"26"},{"size":500,"mtime":1662388905507,"results":"28","hashOfConfig":"26"},{"size":350,"mtime":1654539534364,"results":"29","hashOfConfig":"26"},{"size":5562,"mtime":1662826517849,"results":"30","hashOfConfig":"26"},{"size":835,"mtime":1654665372280,"results":"31","hashOfConfig":"26"},{"size":1356,"mtime":1654665355118,"results":"32","hashOfConfig":"26"},{"size":1414,"mtime":1654665339116,"results":"33","hashOfConfig":"26"},{"size":849,"mtime":1654665331560,"results":"34","hashOfConfig":"26"},{"size":238,"mtime":1654014597126,"results":"35","hashOfConfig":"26"},{"size":223,"mtime":1653953343331,"results":"36","hashOfConfig":"26"},{"size":4860,"mtime":1654665484395,"results":"37","hashOfConfig":"26"},{"size":1704,"mtime":1654542073164,"results":"38","hashOfConfig":"26"},{"size":817,"mtime":1662826540076,"results":"39","hashOfConfig":"26"},{"size":781,"mtime":1662826548010,"results":"40","hashOfConfig":"26"},{"size":1050,"mtime":1662826563845,"results":"41","hashOfConfig":"26"},{"size":6849,"mtime":1662826580284,"results":"42","hashOfConfig":"26"},{"size":134,"mtime":1653955808077,"results":"43","hashOfConfig":"26"},{"size":828,"mtime":1654665305535,"results":"44","hashOfConfig":"26"},{"size":848,"mtime":1654042996344,"results":"45","hashOfConfig":"26"},{"size":577,"mtime":1653955715905,"results":"46","hashOfConfig":"26"},{"size":931,"mtime":1662397055914,"results":"47","hashOfConfig":"26"},{"size":1003,"mtime":1653953380863,"results":"48","hashOfConfig":"26"},{"size":2227,"mtime":1662826286505,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1lifizp",{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/finnroblin/Code/portfolio/pages/404.tsx",[],[],"/Users/finnroblin/Code/portfolio/pages/_app.tsx",[],[],"/Users/finnroblin/Code/portfolio/pages/_document.tsx",[],[],"/Users/finnroblin/Code/portfolio/pages/bookshelf.tsx",[],[],"/Users/finnroblin/Code/portfolio/pages/index.tsx",[],[],"/Users/finnroblin/Code/portfolio/pages/posts/deploying-to-aws.tsx",[],[],"/Users/finnroblin/Code/portfolio/pages/posts.tsx",[],[],"/Users/finnroblin/Code/portfolio/pages/works/zenblock.tsx",[],[],"/Users/finnroblin/Code/portfolio/pages/works.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/bio.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/fonts.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/game-of-life.tsx",["123"],[],"import {\n  useColorModeValue,\n  Text,\n  Box,\n  Button,\n  Container,\n  Grid,\n  GridItem,\n  Modal,\n  ModalContent,\n  useDisclosure,\n  ModalBody,\n  ModalOverlay,\n  HStack,\n  \n  ModalFooter\n} from '@chakra-ui/react'\nimport { useCallback, useRef, useState } from 'react'\nimport { produce } from 'immer'\n\nenum _LifeState {\n  _Dead = 0,\n  _Alive = 1\n}\n\nconst directions = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 0],\n  [-1, 0],\n  [1, 1],\n  [-1, -1]\n]\nconst GameOfLife = ({\n  numRows = 50,\n  numCols = 50\n}: {\n  numRows?: number\n  numCols?: number\n}) => {\n  // const {currentArr, setCurrentArr} = useState();\n  const [grid, setGrid] = useState(() => {\n    const rows = []\n    for (let i = 0; i < numRows; i += 1) {\n      const col = Array.from(Array(numCols), () => _LifeState._Dead)\n      rows.push(col)\n    }\n    return rows\n  })\n  const [running, setRunning] = useState(false)\n\n  const runningRef = useRef(running)\n  runningRef.current = running\n  const runSimulation = useCallback(() => {\n    // base/kill condition, Ref is always accessible to this fn\n    if (!runningRef.current) {\n      return\n    }\n    // simulate\n\n    setGrid(currGrid => {\n      return produce(currGrid, gridCopy => {\n        for (let i = 0; i < numRows; i += 1) {\n          for (let j = 0; j < numCols; j += 1) {\n            let neighbors = 0\n            directions.forEach(([x, y]) => {\n              const newX = i + x\n              const newY = j + y\n              if (newX >= 0 && newX < numRows && newY >= 0 && newY < numCols) {\n                neighbors += currGrid[newX][newY]\n              }\n            })\n            // direction checks\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][j] = _LifeState._Dead\n            } else if (currGrid[i][j] === _LifeState._Dead && neighbors === 3) {\n              gridCopy[i][j] = _LifeState._Alive\n            }\n          }\n        }\n      })\n    })\n\n    setTimeout(runSimulation, 1000)\n  }, []) // fn only created once due to empty array\n  // console.log(grid)\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const Overlay = () => (\n    <ModalOverlay bg=\"blackAlpha.300\" backdropFilter=\"blur(10px)\" />\n  )\n\n  const border =useColorModeValue('solid 1px black', 'solid 1px white');\n  return (\n    <>\n      <HStack spacing={'20%'}>\n        <Box>\n          <Text>Conway&apos;s Game Of Life</Text>\n        </Box>\n        <HStack>\n          <Button\n            onClick={() => {\n              setRunning(!running)\n              if (!running) {\n                runningRef.current = true\n                runSimulation()\n              }\n            }}\n          >\n            {running ? 'Stop Simulation' : 'Start Simulation'}\n          </Button>\n          <Box alignSelf={'right'}>\n            <Button\n              alignSelf={'right'}\n              alignContent={'right'}\n              justifySelf={'right'}\n              justifyContent={'right'}\n              justifyItems={'right'}\n              onClick={onOpen}\n            >\n              About\n            </Button>\n          </Box>\n          <Modal isCentered isOpen={isOpen} onClose={onClose}>\n            <Overlay />\n            <ModalContent>\n              <ModalBody>\n                Conway&apos;s Game of Life is a cellular automaton. Click on each\n                square to toggle its state between alive and dead, and press\n                &quot;Start Simulation&quot; to start the game. Each cell will live or die depending on its neighbors.\n              </ModalBody>\n              <ModalFooter>\n                  <Container>\n                \n                \n                <Button alignSelf={\"left\"} colorScheme=\"blue\" mr={3} onClick={onClose}>\n                  Close\n                </Button>\n                \n                </Container>\n              </ModalFooter>\n            </ModalContent>\n          </Modal>\n        </HStack>\n      </HStack>\n\n      <Box>\n        {/* <Stack direction={'vertical'}> */}\n        <Grid\n          fill={'azure'}\n          templateColumns={`repeat(${numCols}, 20px)`}\n          // templateColumns=\"repeat(50, 20px)\"\n        >\n          {grid.map((rows, i) =>\n            rows.map((col, j) => (\n              <GridItem key={`(${i}, ${j})`}\n                width={5}\n                height={5}\n                backgroundColor={grid[i][j] ? 'red' : undefined}\n                border={border}\n                onClick={() => {\n                  const newGrid = produce(grid, gridCopy => {\n                    gridCopy[i][j] =\n                      grid[i][j] === _LifeState._Alive\n                        ? _LifeState._Dead\n                        : _LifeState._Alive\n                  })\n\n                  setGrid(newGrid)\n                }}\n              ></GridItem>\n            ))\n          )}\n        </Grid>\n\n        {/* </Stack> */}\n      </Box>\n      \n    </>\n  )\n}\n\nexport default GameOfLife\n","/Users/finnroblin/Code/portfolio/components/grid-item.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/layouts/article.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/layouts/main.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/logo.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/navbar.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/paragraph.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/post.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/project.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/section.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/theme-toggle-button.tsx",[],[],"/Users/finnroblin/Code/portfolio/lib/theme.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/callout.tsx",[],[],{"ruleId":"124","severity":1,"message":"125","line":87,"column":6,"nodeType":"126","endLine":87,"endColumn":8,"suggestions":"127"},"react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'numCols' and 'numRows'. Either include them or remove the dependency array. If 'setGrid' needs the current value of 'numRows', you can also switch to useReducer instead of useState and read 'numRows' in the reducer.","ArrayExpression",["128"],{"desc":"129","fix":"130"},"Update the dependencies array to be: [numCols, numRows]",{"range":"131","text":"132"},[1949,1951],"[numCols, numRows]"]