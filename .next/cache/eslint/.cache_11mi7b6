[{"/Users/finnroblin/Code/portfolio/pages/404.tsx":"1","/Users/finnroblin/Code/portfolio/pages/_app.tsx":"2","/Users/finnroblin/Code/portfolio/pages/_document.tsx":"3","/Users/finnroblin/Code/portfolio/pages/bookshelf.tsx":"4","/Users/finnroblin/Code/portfolio/pages/index.tsx":"5","/Users/finnroblin/Code/portfolio/pages/posts/deploying-to-aws.tsx":"6","/Users/finnroblin/Code/portfolio/pages/posts.tsx":"7","/Users/finnroblin/Code/portfolio/pages/works/zenblock.tsx":"8","/Users/finnroblin/Code/portfolio/pages/works.tsx":"9","/Users/finnroblin/Code/portfolio/components/bio.tsx":"10","/Users/finnroblin/Code/portfolio/components/fonts.tsx":"11","/Users/finnroblin/Code/portfolio/components/game-of-life.tsx":"12","/Users/finnroblin/Code/portfolio/components/grid-item.tsx":"13","/Users/finnroblin/Code/portfolio/components/layouts/article.tsx":"14","/Users/finnroblin/Code/portfolio/components/layouts/main.tsx":"15","/Users/finnroblin/Code/portfolio/components/logo.tsx":"16","/Users/finnroblin/Code/portfolio/components/navbar.tsx":"17","/Users/finnroblin/Code/portfolio/components/paragraph.tsx":"18","/Users/finnroblin/Code/portfolio/components/post.tsx":"19","/Users/finnroblin/Code/portfolio/components/project.tsx":"20","/Users/finnroblin/Code/portfolio/components/section.tsx":"21","/Users/finnroblin/Code/portfolio/components/theme-toggle-button.tsx":"22","/Users/finnroblin/Code/portfolio/lib/theme.tsx":"23"},{"size":552,"mtime":1654623777691,"results":"24","hashOfConfig":"25"},{"size":705,"mtime":1654030713230,"results":"26","hashOfConfig":"25"},{"size":536,"mtime":1654665400444,"results":"27","hashOfConfig":"25"},{"size":350,"mtime":1654539534364,"results":"28","hashOfConfig":"25"},{"size":5573,"mtime":1654665387654,"results":"29","hashOfConfig":"25"},{"size":835,"mtime":1654665372280,"results":"30","hashOfConfig":"25"},{"size":1356,"mtime":1654665355118,"results":"31","hashOfConfig":"25"},{"size":1414,"mtime":1654665339116,"results":"32","hashOfConfig":"25"},{"size":849,"mtime":1654665331560,"results":"33","hashOfConfig":"25"},{"size":238,"mtime":1654014597126,"results":"34","hashOfConfig":"25"},{"size":223,"mtime":1653953343331,"results":"35","hashOfConfig":"25"},{"size":4860,"mtime":1654665484395,"results":"36","hashOfConfig":"25"},{"size":1704,"mtime":1654542073164,"results":"37","hashOfConfig":"25"},{"size":821,"mtime":1654032270501,"results":"38","hashOfConfig":"25"},{"size":773,"mtime":1654665519472,"results":"39","hashOfConfig":"25"},{"size":1043,"mtime":1654109054650,"results":"40","hashOfConfig":"25"},{"size":6807,"mtime":1654665290078,"results":"41","hashOfConfig":"25"},{"size":134,"mtime":1653955808077,"results":"42","hashOfConfig":"25"},{"size":828,"mtime":1654665305535,"results":"43","hashOfConfig":"25"},{"size":848,"mtime":1654042996344,"results":"44","hashOfConfig":"25"},{"size":577,"mtime":1653955715905,"results":"45","hashOfConfig":"25"},{"size":931,"mtime":1654023343498,"results":"46","hashOfConfig":"25"},{"size":1003,"mtime":1653953380863,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1lifizp",{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/finnroblin/Code/portfolio/pages/404.tsx",[],[],"/Users/finnroblin/Code/portfolio/pages/_app.tsx",[],[],"/Users/finnroblin/Code/portfolio/pages/_document.tsx",[],[],"/Users/finnroblin/Code/portfolio/pages/bookshelf.tsx",[],[],"/Users/finnroblin/Code/portfolio/pages/index.tsx",[],[],"/Users/finnroblin/Code/portfolio/pages/posts/deploying-to-aws.tsx",[],[],"/Users/finnroblin/Code/portfolio/pages/posts.tsx",[],[],"/Users/finnroblin/Code/portfolio/pages/works/zenblock.tsx",[],[],"/Users/finnroblin/Code/portfolio/pages/works.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/bio.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/fonts.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/game-of-life.tsx",["118"],[],"import {\n  useColorModeValue,\n  Text,\n  Box,\n  Button,\n  Container,\n  Grid,\n  GridItem,\n  Modal,\n  ModalContent,\n  useDisclosure,\n  ModalBody,\n  ModalOverlay,\n  HStack,\n  \n  ModalFooter\n} from '@chakra-ui/react'\nimport { useCallback, useRef, useState } from 'react'\nimport { produce } from 'immer'\n\nenum _LifeState {\n  _Dead = 0,\n  _Alive = 1\n}\n\nconst directions = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 0],\n  [-1, 0],\n  [1, 1],\n  [-1, -1]\n]\nconst GameOfLife = ({\n  numRows = 50,\n  numCols = 50\n}: {\n  numRows?: number\n  numCols?: number\n}) => {\n  // const {currentArr, setCurrentArr} = useState();\n  const [grid, setGrid] = useState(() => {\n    const rows = []\n    for (let i = 0; i < numRows; i += 1) {\n      const col = Array.from(Array(numCols), () => _LifeState._Dead)\n      rows.push(col)\n    }\n    return rows\n  })\n  const [running, setRunning] = useState(false)\n\n  const runningRef = useRef(running)\n  runningRef.current = running\n  const runSimulation = useCallback(() => {\n    // base/kill condition, Ref is always accessible to this fn\n    if (!runningRef.current) {\n      return\n    }\n    // simulate\n\n    setGrid(currGrid => {\n      return produce(currGrid, gridCopy => {\n        for (let i = 0; i < numRows; i += 1) {\n          for (let j = 0; j < numCols; j += 1) {\n            let neighbors = 0\n            directions.forEach(([x, y]) => {\n              const newX = i + x\n              const newY = j + y\n              if (newX >= 0 && newX < numRows && newY >= 0 && newY < numCols) {\n                neighbors += currGrid[newX][newY]\n              }\n            })\n            // direction checks\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][j] = _LifeState._Dead\n            } else if (currGrid[i][j] === _LifeState._Dead && neighbors === 3) {\n              gridCopy[i][j] = _LifeState._Alive\n            }\n          }\n        }\n      })\n    })\n\n    setTimeout(runSimulation, 1000)\n  }, []) // fn only created once due to empty array\n  // console.log(grid)\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const Overlay = () => (\n    <ModalOverlay bg=\"blackAlpha.300\" backdropFilter=\"blur(10px)\" />\n  )\n\n  const border =useColorModeValue('solid 1px black', 'solid 1px white');\n  return (\n    <>\n      <HStack spacing={'20%'}>\n        <Box>\n          <Text>Conway&apos;s Game Of Life</Text>\n        </Box>\n        <HStack>\n          <Button\n            onClick={() => {\n              setRunning(!running)\n              if (!running) {\n                runningRef.current = true\n                runSimulation()\n              }\n            }}\n          >\n            {running ? 'Stop Simulation' : 'Start Simulation'}\n          </Button>\n          <Box alignSelf={'right'}>\n            <Button\n              alignSelf={'right'}\n              alignContent={'right'}\n              justifySelf={'right'}\n              justifyContent={'right'}\n              justifyItems={'right'}\n              onClick={onOpen}\n            >\n              About\n            </Button>\n          </Box>\n          <Modal isCentered isOpen={isOpen} onClose={onClose}>\n            <Overlay />\n            <ModalContent>\n              <ModalBody>\n                Conway&apos;s Game of Life is a cellular automaton. Click on each\n                square to toggle its state between alive and dead, and press\n                &quot;Start Simulation&quot; to start the game. Each cell will live or die depending on its neighbors.\n              </ModalBody>\n              <ModalFooter>\n                  <Container>\n                \n                \n                <Button alignSelf={\"left\"} colorScheme=\"blue\" mr={3} onClick={onClose}>\n                  Close\n                </Button>\n                \n                </Container>\n              </ModalFooter>\n            </ModalContent>\n          </Modal>\n        </HStack>\n      </HStack>\n\n      <Box>\n        {/* <Stack direction={'vertical'}> */}\n        <Grid\n          fill={'azure'}\n          templateColumns={`repeat(${numCols}, 20px)`}\n          // templateColumns=\"repeat(50, 20px)\"\n        >\n          {grid.map((rows, i) =>\n            rows.map((col, j) => (\n              <GridItem key={`(${i}, ${j})`}\n                width={5}\n                height={5}\n                backgroundColor={grid[i][j] ? 'red' : undefined}\n                border={border}\n                onClick={() => {\n                  const newGrid = produce(grid, gridCopy => {\n                    gridCopy[i][j] =\n                      grid[i][j] === _LifeState._Alive\n                        ? _LifeState._Dead\n                        : _LifeState._Alive\n                  })\n\n                  setGrid(newGrid)\n                }}\n              ></GridItem>\n            ))\n          )}\n        </Grid>\n\n        {/* </Stack> */}\n      </Box>\n      \n    </>\n  )\n}\n\nexport default GameOfLife\n","/Users/finnroblin/Code/portfolio/components/grid-item.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/layouts/article.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/layouts/main.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/logo.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/navbar.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/paragraph.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/post.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/project.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/section.tsx",[],[],"/Users/finnroblin/Code/portfolio/components/theme-toggle-button.tsx",[],[],"/Users/finnroblin/Code/portfolio/lib/theme.tsx",[],[],{"ruleId":"119","severity":1,"message":"120","line":87,"column":6,"nodeType":"121","endLine":87,"endColumn":8,"suggestions":"122"},"react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'numCols' and 'numRows'. Either include them or remove the dependency array. If 'setGrid' needs the current value of 'numRows', you can also switch to useReducer instead of useState and read 'numRows' in the reducer.","ArrayExpression",["123"],{"desc":"124","fix":"125"},"Update the dependencies array to be: [numCols, numRows]",{"range":"126","text":"127"},[1949,1951],"[numCols, numRows]"]